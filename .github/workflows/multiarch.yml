name: Multiarch build
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  
env:
  IMAGE_TAG: latest
  IMAGE_NAME: hello-world-multiarch
  IMAGE_REGISTRY: quay.io
  IMAGE_NAMESPACE: mayurwaghmode111
  
jobs:

  build-multiplatform-containerfile:
    name: Build multi-platform image using Containerfile
    env:
      IMAGE_NAME: hello-world-multiarch
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:  
    
     # Checkout buildah action github repository
      - name: Checkout Buildah action
        uses: actions/checkout@v2
        with:
          path: "buildah-build-image"

      - name: Install latest buildah
        if: matrix.install_latest
        run: |
          bash buildah-build-image/.github/install_latest_buildah.sh
          
      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          
      - name: Create Containerfile
        run: |
          cat > Containerfile<<EOF
          FROM ubuntu:20.04
          CMD echo "Hello World from a container running on $(uname -m);"
          EOF
        # Authenticate to container image registry to push the image
        
      - name: Podman Login
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PWD }}    
     
      - name: Build Image for amd64
        id: build_image_platform_amd64
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}:linux-amd64
          tags:  ${{ env.IMAGE_TAG }}
          platform: linux/amd64
          containerfiles: |
            ./Containerfile
            
      - name: Build Image for ppc64le
        id: build_image_platform_ppc64le
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}:linux-ppc64le
          tags:  ${{ env.IMAGE_TAG }}
          platform: linux/ppc64le
          containerfiles: |
            ./Containerfile
            
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ steps.build_image_platform_amd64.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".OCIv1.architecture"
          buildah inspect ${{ steps.build_image_platform_amd64.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".Docker.architecture"
          buildah inspect ${{ steps.build_image_platform_ppc64le.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".OCIv1.architecture"
          buildah inspect ${{ steps.build_image_platform_ppc64le.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".Docker.architecture"
     
      - name: Create and add to manifest
        run: |
          buildah manifest create ${{ env.IMAGE_NAME }}
          buildah manifest add ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:linux-amd64
          buildah manifest add ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:linux-ppc64le
      - name: Push manifest
        run: podman manifest push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}  ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}  --all
          

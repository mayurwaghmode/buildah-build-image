name: Multiarch build
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  
env:
  IMAGE_TAG: latest
  IMAGE_NAME: hello-world-multiarch
  IMAGE_REGISTRY: quay.io
  IMAGE_NAMESPACE: mayurwaghmode111
  
jobs:

  build-multiplatform-containerfile:
    name: Build multi-platform image using Containerfile
    env:
      IMAGE_NAME: hello-world-multiarch
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        platform: [ "linux/amd64", "linux/ppc64le" ]
    steps:          
      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          
      - name: Create Containerfile
        run: |
          cat > Containerfile<<EOF
          FROM docker.io/alpine:3.14
          RUN echo "hello world"
          ENTRYPOINT [ "sh", "-c", "echo -n 'Machine: ' && uname -m && echo -n 'Bits: ' && getconf LONG_BIT && echo 'goodbye world'" ]
          EOF
        # Authenticate to container image registry to push the image
      - name: Podman Login
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PWD }}    
     
      - name: Build Image
        id: build_image_multiplatform
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tag:  ${{ env.IMAGE_TAG }}
          platform: ${{ matrix.platform }}
          containerfiles: |
            ./Containerfile
            
      - name: Echo Outputs
        run: |
          echo "Image: ${{ steps.build_image_multiplatform.outputs.image }}"
          echo "Tags: ${{ steps.build_image_multiplatform.outputs.tags }}"
          echo "Tagged Image: ${{ steps.build_image_multiplatform.outputs.image-with-tag }}"
          
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ steps.build_image_multiplatform.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".OCIv1.architecture"
          buildah inspect ${{ steps.build_image_multiplatform.outputs.image }}:${{ env.IMAGE_TAG }} | jq ".Docker.architecture"
          
      - name: Run image
        run: |
          podman run --rm ${{ steps.build_image_multiplatform.outputs.image }}:${{ env.IMAGE_TAG }}
     
      - name: Push To Quay
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image_multiplatform.outputs.image }}
          tags: ${{ steps.build_image_multiplatform.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}
          platform: ${{ matrix.platform }}
          extra-args: |
            --disable-content-trust
            
      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
          
